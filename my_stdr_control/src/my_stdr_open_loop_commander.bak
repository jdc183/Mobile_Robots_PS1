#include <iostream>
#include <ros/ros.h>
#include <geometry_msgs/Twist.h>
using namespace std;

class open_loop_robot{
    public:
    	open_loop_robot(double dt);
    	void move_robot(double speed, double yaw_rate, double delay);
    	void halt(void);
    private:
    	ros::NodeHandle n;
	ros::Publisher twist_commander;
	double sample_dt;
	geometry_msgs::Twist twist_cmd;
	ros::Rate loop_timer;
};
    
open_loop_robot::open_loop_robot(double dt)
    : loop_timer(1/sample_dt){
    sample_dt = dt;
     // Create a publisher object that can talk to ROS
    twist_commander = n.advertise<geometry_msgs::Twist>("/robot0/cmd_vel", 1);
    
    // start with all zeros in the command message; should be the case by default, but just to be safe..
    twist_cmd.linear.x=0.0;
    twist_cmd.linear.y=0.0;    
    twist_cmd.linear.z=0.0;
    twist_cmd.angular.x=0.0;
    twist_cmd.angular.y=0.0;
    twist_cmd.angular.z=0.0;
    
    //start sending some zero-velocity commands, just to warm up communications with STDR
    for (int i=0;i<10;i++) {
        twist_commander.publish(twist_cmd);
        loop_timer.sleep();
    } 
}

void open_loop_robot::move_robot(double speed, double yaw_rate, double delay){
    twist_cmd.linear.x=speed; //stop moving forward
    twist_cmd.angular.z=yaw_rate; //and start spinning in place
    double timer=0.0; //reset the timer
    while(timer<delay) {
        twist_commander.publish(twist_cmd);
        timer+=sample_dt;
        loop_timer.sleep();
    }
}

void open_loop_robot::halt(void){
    twist_cmd.angular.z=0.0; 
    twist_cmd.linear.x=0.0; 
    for (int i=0;i<10;i++) {
        twist_commander.publish(twist_cmd);
        loop_timer.sleep();
    }   
}


//node to send Twist commands to the Simple 2-Dimensional Robot Simulator via cmd_vel
int main(int argc, char **argv) {

    ros::init(argc, argv, "my_stdr_commander"); 
    
    //some "magic numbers"
    double speed = 1.0; // 1m/s speed command
    double yaw_rate = 0.5; //0.5 rad/sec yaw rate command
    double time_3_sec = 3.0; // should move 3 meters or 1.5 rad in 3 seconds
    
    open_loop_robot rob(0.01);
    
    rob.move_robot(speed,0.0,time_3_sec);
    rob.move_robot(0.0,yaw_rate,time_3_sec);
    rob.move_robot(speed,0.0,time_3_sec);

    //halt the motion
    rob.halt();
                 
    //done commanding the robot; node runs to completion
}

